/*
	Border Radius apply a border radius effect.
	@param $radius : The radius of the border (Assumes pixels). 
*/

@mixin border-radius($radius) {
	@if unitless($radius){
		@warn "Assuming #{$size} to be in pixels";
		$size: 1px * $size;
	}
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	-ms-border-radius: $radius;
	border-radius: $radius;
}

/*
	Remove Box Shadow, removes any box shadow effect 
*/

@mixin remove-box-shadow{
	-webkit-box-shadow: none;
	-moz-box-shadow: none;
	box-shadow: none;
}

/*
	Transition, adds a transition
	@param $transition-property : The property you want to have the effect on.
	@param $transition-time : The time the transition will last. 
	@param $method : The method of transition, e.g linear.
*/

@mixin transition($transition-property, $transition-time, $method) {
	@if unitless($transition-time){
		$transition-time : $transiton-time * 1s;
	}
	-webkit-transition: $transition-property $transition-time $method;
	-moz-transition: $transition-property $transition-time $method;
	-ms-transition: $transition-property $transition-time $method;
	-o-transition: $transition-property $transition-time $method;
	transition: $transition-property $transition-time $method;
}

/*
	Arrow, creates an arrow.
	@param $direction : The direction you want the arrow to face. Valid inputs are: "up","dow","right","left". See rotate also for more directions
	@param $size : The *rough* size of the arrow, experimenting will be needed. Also if no unit is specified them assume pixels
	@param $colour : The colour of the arrow.
*/

@mixin arrow($direction,$size,$colour) {
	width: 0;
	height: 0;
	@if unitless($size){
		@warn "Assuming #{$size} to be in pixels";
		$size: 1px * $size;
	}
	@if $direction == "up" {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-bottom: $size solid $colour;	
	}
	@if $direction == "down" {
		border-left: $size solid transparent;
		border-right: $size solid transparent;	
		border-top: $size solid $colour;	
	}
	@if $direction == "right" {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-left: $size solid $colour;
	}
	@if  $direction == "left" {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-left: $size solid $colour;
	}
}

/*
	Align the element.
	@param $side : The side that you want to align to. Valid inputs are: "left","center","right".
	@param @child : Whether or not child nodes should be aligned as well as the node that has this mixin
*/

@mixin align($side, $child : false) {
	$valid : false;
	@if $child == true {
		
		@if $side == "left" {
			align : left;
			$valid : true;
		}
		@if $side == "center" {
			align : center;
			$valid : true;
		}
		@if $side == "right" {
			align : right;
			$valid : true;
		}	
		
	}
	@if $side == "left" {
		margin-right: auto;
		$valid : true;
	}
	@if $side == "center" {
		margin-left: auto;
		margin-right: auto;
		$valid : true;
	}
	@if $side == "right" {
		margin-left: auto;
		$valid : true;
	}
	@if $valid == false
	{
		@warn $side + " is not a valid argument for $side! See Explanation.";
	}
}

/*
	Rotate the element
	@param $deg : The amount of degrees (Unit optional, Automatically adds deg)
*/

@mixin rotate($deg) {
	@if unitless($deg) {
		$deg : 1deg * $deg;
	}
	-moz-transform: rotate($deg);
	-o-transform: rotate($deg);
	-webkit-transform: rotate($deg);
	transform: rotate($deg);
}

/*
	Box Shadow, creates a box shadow
	@param $top : Top shadow
	@param $left : Left shadow
	@param $blur : The blur
	@param $color : Shadow colour
	@param $inset : Default false, determins if the shadow is inset or not.
*/

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $color;
    -moz-box-shadow:inset $top $left $blur $color;
    box-shadow:inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}


@mixin placeholder($dftColor, $focusColor) {
	input::-webkit-input-placeholder {
    	color:    $dftColor;
	}
	input:-moz-placeholder {
	    color:    $dftColor;
	    opacity:  1;
	}
	input::-moz-placeholder {
	    color:    $dftColor;
	    opacity:  1;
	}
	input:-ms-input-placeholder {
	    color:    $dftColor;
	}
	input:focus::-webkit-input-placeholder {
    	color:    $focusColor;
	}
	input:focus:-moz-placeholder {
	    color:    $focusColor;
	    opacity:  1;
	}
	input:focus::-moz-placeholder {
	    color:    $focusColor;
	    opacity:  1;
	}
	input:focus:-ms-input-placeholder {
	    color:    $focusColor;
	}
}
